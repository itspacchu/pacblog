[{"content":"Greetings humans, I have dissapeared for a very long time \u0026hellip; last post was back in E paper Kiosk : 2022-08-28\nI\u0026rsquo;ve been dealing with alot of stuff that happened in the year of 2023; Firstly I got a JOB \u0026hellip; In this economy of layoffs and all I somehow was lucky enough to get one although not in my field Devops Engineer still something that interests me, As this blog and all the infrastructure I have keeping this website running is my passion project.\nThe new work being a corporate job, I was trying to learn how to fix my schedules (As its fully Remote) I have completly wrecked my sleep schedule and my daily cycling habit which I have started in 2020 was shattered, I have been seriously addicted to playing games like Overwatch 2 and Destiny which led to Stupidly insane amount of time being wasted \u0026hellip; maybe not wasted as I did have some fun but nevertheless Hours of time just spent playing the same matches and stuff felt like a chore more than having fun.\nSo 2023 was entirely spent on learning alot of things related to my new work field such as Kubernetes, Terraform, Ansible and other stuff. So yeah\u0026hellip; pretty cool stuff.\nAnother thing that happened in Late 2023, Early 2024 was Oracle Free tier account of mine being deleted. This website was hosted as a container on the Free tier ARM instances.\nCurrently this server is running on a kubernetes cluster on my homelab setup.\n1 2 3 4 HOMELAB ├── homelab.local (Raspberry Pi 4) ├── pi3dev.local (Raspberry Pi 3) └── pidev.local (Raspberry Pi 4) Cloudflare tunnels to proxy from home network to well prashantnook.in.\n\u0026hellip;\n","permalink":"/post/update/","summary":"Greetings humans, I have dissapeared for a very long time \u0026hellip; last post was back in E paper Kiosk : 2022-08-28\nI\u0026rsquo;ve been dealing with alot of stuff that happened in the year of 2023; Firstly I got a JOB \u0026hellip; In this economy of layoffs and all I somehow was lucky enough to get one although not in my field Devops Engineer still something that interests me, As this blog and all the infrastructure I have keeping this website running is my passion project.","title":"Update, I am alive"},{"content":"Greetings everyone,\nRecently I have been interning as a Research Intern at IIIT Hyderabad in Smart City Research Center.\nthis is the very first photo I took inside.. and yea I know my camera glitched up*\nIt\u0026rsquo;s been really fun working with cool stuff and having access to makers lab, which is an absolute Hardware haven. I\u0026rsquo;ve worked on some basic projects with neopixels and stuff which I\u0026rsquo;ve already worked with at my home with the TV ambilight setup with prismatik and Adalight FastLED.\nAnyway coming to my current project here, Recently we were planning on erecting bunch of Smart Lamps Throughout campus. (here\u0026rsquo;s my beautiful artistic rendition )\nYou see that e-paper display right there! yes, That\u0026rsquo;s what I was tinkering with for the last few weeks and boy the display is gorgeous.\nThe main plan involves displaying essential data on lamp post which is also visible in broad daylight, Since e-paper display uses external light source to diffuse the screen contents rather than relying on backlight or self emissive nature of LEDs and OLEDs, This is perfect for this type of application.\nElectronic Paper Display So what the heck is Electronic Paper display. For all the folks who used/seen a kindle its basically that.\nInstead of traditional Pixels with Red Blue Green pixels lighting up in a matrix to form a screen , E-paper has charged balls which move in a fluid to give us the changable content of a screen.\nLED display vs E-paper There\u0026rsquo;s this company Waveshare which makes cool little hats for raspberry pi along with big E-paper displays which work by SPI. They are pretty expensive around 5000 INR just for a 800 x 480 7 inch display.\nhere\u0026rsquo;s how the raw display module looks like.. pretty gorgeous on itself.\nHere is some tests with using the examples to render images on the panel (notice the induvidual dots instead of having grayscale values ).\nThe first limitation I kinda faced when working with this panel is \u0026hellip; the display is 1 bit color!\nDigital Color Color in digital medium is represented in bits, Usually the images you see are 24 bit. $$ 3 * 8 \\textrm(bit) $$\nSince e-paper display is just grayscale we only have one channel of gray values from $$ 0 \\rightarrow 1 $$ For a 8bit grayscale image we scale the normalized pixel brightness. $$ (0,1)_{\\textrm(PixelValue)} * 2^8 $$ To have the standard (0,255) Color range we usually see.\nps If you've seen my selfie in the beginning you'd have noticed the blocky image, This is due to low bit depth of the image. This is called Quantization\nSince we dont have any grayscale values in a 1 bit color display, we have to use some clever tricks to represent grayscale values at cost of display resolution.\nIf you\u0026rsquo;ve seen this display comparision we don\u0026rsquo;t really notice the induvidual Red Blue and Green Subpixels as they form different color shades, The orange you see on screen isn\u0026rsquo;t really orange but a peak of Red and half peak of Green.\nSo if you look at the spectrum you would see something like this.\nSimilar to frequency domain colors appearing as something different we have a method to show grayscale values in spatial domain.\nDithering dithering an image is a way to make an imahe appear higher fidelity than it actually is.\nSo let\u0026rsquo;s consider a simple scenario, we have 3 colors\n1 2 3 4 5 BLACK = (0,0,0) GRAY = (0.5,0.5,0.5) WHITE = (1,1,1) colors = [BLACK,GRAY,WHITE] If we directly apply the colors without any gradient it would look very discrete (Left Sphere), While if we add a bit of noise while interpolating between the colors we can get a pseudo smooth appearance (Right Sphere).\nFloyd-Steinberg Dithering This is a very cool dithering algorithm used in GIFs and many low fidelity formats to preserve detail lossy.\nI was originally planned to write my own Dithering algorithm to generate dithered bitmap (bmp) format for the Waveshare API but found out python\u0026rsquo;s pillow Python Imaging Library\u0026rsquo;s\n1 Image.convert(\u0026#39;1\u0026#39;) method already does basic dithering which covers my need.\nSo taking a screenshot of my website and passing it through the dithering algorithm we have\nEven the render of my head was represented really well using dithering.\nNow since this current e-ink panel supports red pigment as well I tried doing some basic point processing to fetch red values to dither and represent as well and it turned out kinda weird so we decided to completely drop using the red pigment, But it looked really cool I say it.\n1 2 3 4 5 webpage = Image.open(\u0026#34;screenshot.png\u0026#34;).convert(\u0026#34;RGB\u0026#34;).transpose(Image.ROTATE_90) webpage = change_contrast(webpage,100) #r = webpage.split()[0] Do the point processing for red #r.point( lambda p: 255 - (10*p) if ((p \u0026gt;= 200) and (p \u0026lt; 240)) else 255 ).convert(\u0026#34;1\u0026#34;).save(\u0026#34;screenshot_r.bmp\u0026#34;) webpage.convert(\u0026#34;1\u0026#34;).save(\u0026#34;screenshot_b.bmp\u0026#34;) these images are manually segmented into red and black parts\nWeb rendering? So the people here wanted the thing to be connected to WiFi so it can fetch data from onem2m server of iiith. Before my plan was to use opencv or pillow itself to completly render graphs and map and export as an image, but there was a problem.\nIf someone want\u0026rsquo;s to update the layout or want to completly change how it looks\u0026hellip; they have to redo the whole image generation part again, So why not go the Electron route and just render a webpage, this way it\u0026rsquo;s more powerful as it uses HTML+CSS to markup the layout.\nBy calling chrome headless mode\n1 subprocess.run([\u0026#39;chromium\u0026#39;,\u0026#39;--headless\u0026#39;,\u0026#39;--disable-gpu\u0026#39;,\u0026#39;--screenshot\u0026#39;,\u0026#39;--window-size=480,800\u0026#39;,url]) It was possible to export a screenshot of the webpage which can be easily converted and displayed.\nEnclosure Design We wanted to place the whole e-ink panel inside the metal chassy of the lamp post so I had to come up with a way to put the panel and all the electronics inside the post.\nThe first iteration of design included a basic box where the display can easily slide through\u0026hellip; yea sliding through is a very very stupid idea.\nThe display broke as it was sliding inside and that was a very expensive mistake! (not gonna elaborate on how much I thought I was gonna be fired! )\nHere\u0026rsquo;s a new design which is yet to be printed.\nFinal Assembly So after designing a whole enclosure this is how it finally fits in all together. We were extremely on time crunch as people from Wi-SUN were coming in a week for evaluation, After giving it a finishing color coat it started giving the look of being profesionally made.\nAt this point I wanted to put everything in a docker for easy deployment incase of issues with raspberry pi or broken SD card ( I have accidentally broken some while handling this 3D print ), But again due to the time crunch I\u0026rsquo;ve decided just to pile up on systemd scripts.\nFor automating simple updates I\u0026rsquo;ve worked with github actions to create a self runner to auto update the bot.\nWhich did save alot of time by not manually ssh-ing into the pi. The worst part about the lamp enclosure is \u0026hellip; it\u0026rsquo;s made of metal, essentially making it a faraday cage.\nA Faraday cage is a device which blocks external electromagnetic signals from passing through \u0026hellip; Since WiFi is part of the electromagnetic spectrum, It was essentially making the communication with the main router absurdly slow. Also the fact that the only way the WiFi signal can even reach the lamp was through a window.\nI found out about the WiFi issue on the day the Wi-SUN people are supposed to come, Dr Aftab suggested we remove a small metal panel to allow WiFi in and well it worked for the demo.\nSince we were working with this lamp during the phase of KETI\u0026rsquo;s hackathon, we decided to present this alongside our main hackathon project.\nOverall it was really a fun project to work with.\nUpdate We won the Best Technology award in KETI (Korean Electronics Technlogical Institute) OneM2M hackathon. I did not expect we would pull this off.\n","permalink":"/post/e-paper-kiosk/","summary":"Greetings everyone,\nRecently I have been interning as a Research Intern at IIIT Hyderabad in Smart City Research Center.\nthis is the very first photo I took inside.. and yea I know my camera glitched up*\nIt\u0026rsquo;s been really fun working with cool stuff and having access to makers lab, which is an absolute Hardware haven. I\u0026rsquo;ve worked on some basic projects with neopixels and stuff which I\u0026rsquo;ve already worked with at my home with the TV ambilight setup with prismatik and Adalight FastLED.","title":"E Paper Kiosk"},{"content":"Hello everyone!\nLast semester we had a course on Control Systems, where we learned about controlling systems and how to design their controllers. As a huge fan of Boston dynamics Spot and their various robots, I\u0026rsquo;ve always been curious about how they work.\nThe very first time I was introduced to robotics was back in 5th grade\u0026rsquo;s Summer Camp, where we had to build robots like Line following and Path navigating.\nNow coming back to the current project, This project is currently my Final year project, and I\u0026rsquo;m still working on it. But that doesn\u0026rsquo;t stop me from explaining the simulation built-in Godot.\nThe Project If you wanna skip to the final part, you can go to the Web Version\nThe main goal of this project is to build a simulation of a rocket controller, which can stabilize the rocket in a controlled manner. For this, the most naive approach is to use a PID controller to stabilize the rocket.\nA Proportional, Integral and Derivative controller (PID) is a traditional controller that can be used to stabilize a system. As the name suggests, the PID controller is a combination of a Proportional, Integral and Derivative controller, given by the following equation:\n$$F_{out} = k_p * \\delta + k_d * \\frac{d}{dt} \\delta + \\int_{0}^{t} k_i * \\delta dt$$\n$$ \\delta \\textrm{ is the error between the desired value and the actual value. }$$\nThat\u0026rsquo;s a heck of a lot of math, but it\u0026rsquo;s really simple to understand.\nNow if you\u0026rsquo;re any intelligent living specimen, It\u0026rsquo;ll be obvious to move the needle to the right by +23 degrees, and viola the error is 0.\nThis is the proportional controller, which is the simplest of the three. It simply tries to move the needle to the right by +23 degrees, which is what we did.\n$$ F_{P} = k_p * \\delta $$\nNow we can see the error is oscillating from -23 deg to +23 deg, Which is where the derivative comes in, which crushes down the oscillating errors.\n$$F_{D} = K_d * \\frac{d}{dt} \\delta$$\nHere there\u0026rsquo;s a DC error that isn\u0026rsquo;t oscillatory nor linear, For this DC error, we need to use an Integral controller.\n$$ F_{I} = K_i * \\int_{0}^{t} \\delta dt$$\nNow, why did I tell you all this? Well, this is the entirety of the PID controller.\nThe Rocket is a simple rigid body, where torque is applied to the rocket to rotate it and Force is applied as thrust to propel it.\nThe Thrust force can be rotated to change the direction of the force being applied, this is Thrust Vectoring.\nFor the simplicity of control, Rocket\u0026rsquo;s z rotation is locked to 0 deg.\nNow for any Control System, we have both Control parameters and Observer parameters. For this rocket, I\u0026rsquo;ve chosen the Control parameters to be the X, Y torque which is controlled by side thrusters, and the main thrust along with thrust vectoring controlled by their respective parameters, For the Observer parameters we have the Z position (Altitude) along with X, Y Rotation for keeping the rocket upright.\nNow for just settings all the PID controllers and observer parameters and tuning it just right.\nThe Simulation 1 2 3 4 5 6 7 8 9 10 11 12 #rotational side thrusters PID_X = preload(\u0026#34;res://PID.gd\u0026#34;).new(1, 0.5, 0.6) PID_Z = preload(\u0026#34;res://PID.gd\u0026#34;).new(1, 0.5, 0.6) #thrust vectoring PID_tv_x = preload(\u0026#34;res://PID.gd\u0026#34;).new(0.4, 0.2, 0.15) PID_tv_z = preload(\u0026#34;res://PID.gd\u0026#34;).new(0.4, 0.2, 0.15) #height calib PID_Ypos = preload(\u0026#34;res://PID.gd\u0026#34;).new(0.5, 0.35, 0.75) PID_tv_x._set_range(-0.3,0.3) PID_tv_z._set_range(-0.3,0.3) PID_Ypos._set_range(0,1) PID_Ypos.minimum_clamp = 0; # can\u0026#39;t get negative thrust right The PID values chosen as tuned experimentally, although there are much better ways of properly tuning it and getting the best results the first set of values chosen \u0026ldquo;educatively..lol\u0026rdquo; just worked out of the box.\nI know tuning is done by computing the transfer function of the PID system I\u0026rsquo;ve got going but I\u0026rsquo;m planning on switching to MATLAB for actual simulation so this project just deals with the basic control scheme and manual tuning.\nWhat kind of ancient browser are you using! html videos not supported. As you can see there\u0026rsquo;s a lot of oscillation and drift on the X Y plane, But it does seem to stabilize itself upright so that\u0026rsquo;s progress.\nAfter a bit of adjusting the Derivative part and adding an observer for the X Y position here\u0026rsquo;s the result.\nWhat kind of ancient browser are you using! html videos not supported. Auto landing By setting the target rotating and position to a particular point, The rocket tries to reach the specified location. By generating a path towards a landing zone and interpolating the position, We can land the rocket!.\n1 2 3 4 5 6 7 8 9 ... if(autopilot): err_rot_x = target_rot.x - rx; err_rot_z = target_rot.z - rz; #vec2 y = z blender coord space err_pos_x = target_pos.x - px; err_pos_z = target_pos.z - pz; err_pos_y = target_pos.y - height; ... What kind of ancient browser are you using! html videos not supported. Overall this has been a very fun project, I\u0026rsquo;ve learned a lot about building PID controllers and using it, although in a Simulation it\u0026rsquo;s still a very fun thing to play around with. For my major project, I\u0026rsquo;m planning on using this as a base to build a practical implementation. Till that time keep exploring :D.\nWeb version A web playable version of this project is available Here\n","permalink":"/post/pid-rocket-stability/","summary":"Hello everyone!\nLast semester we had a course on Control Systems, where we learned about controlling systems and how to design their controllers. As a huge fan of Boston dynamics Spot and their various robots, I\u0026rsquo;ve always been curious about how they work.\nThe very first time I was introduced to robotics was back in 5th grade\u0026rsquo;s Summer Camp, where we had to build robots like Line following and Path navigating.","title":"Rocket PID Stability"},{"content":"First-ish contact First contact is essential for peace keeping between races so here\u0026rsquo;s my first contact. Hello I am Prashant and this is a blog which I\u0026rsquo;m hopefully gonna update. Cheers.\n","permalink":"/post/first-contact/","summary":"First-ish contact First contact is essential for peace keeping between races so here\u0026rsquo;s my first contact. Hello I am Prashant and this is a blog which I\u0026rsquo;m hopefully gonna update. Cheers.","title":"First Contact"},{"content":"Lately Youtube has been recommending me random Chaos theory videos and how small changes to input of a system can lead to huge changes in the Output.\nThe Output of system diverges vastly from the input even for very small difference in initial input conditions. Me being the type of person I am, decided to make a double pendulum system, cause processing is a really fun library to play around with and I wanted to try it out.\nI worked on some basic projects from TheCodingTrain and Nature of code and this is one of them. Reference Basic Implementation idea : Pivoting a point at p1,p2 now with a fixed length find a point lets say elbow e1,e2\nto find the e1 and e2 with length l1, You can do : e1 = l1 * cos(theta); Now once we get the base 2 lines and points attached basically plugging in the formula for theta1 and theta2 their velocities (angular) and accelerations. V And here's my implementation. [ Click the image to try it out ] Hope you enjoyed this post.\n","permalink":"/post/double_pendulum/","summary":"Lately Youtube has been recommending me random Chaos theory videos and how small changes to input of a system can lead to huge changes in the Output.\nThe Output of system diverges vastly from the input even for very small difference in initial input conditions. Me being the type of person I am, decided to make a double pendulum system, cause processing is a really fun library to play around with and I wanted to try it out.","title":"Double_pendulum"},{"content":"++++ This post is mirrored from here\nThis project started off in exploring the Inverse Kinematics. Inverse kinematics piqued my interest when I started watching MIT maker portfolio videos and stumbled on a 5 arm chain Robot arm. I\u0026rsquo;ve always wondered how IK systems work in blender or cinema4D and I thought I\u0026rsquo;d explore.\nThe first method I stumbled on was Isoceles triangle approach where you compute angles assuming symmetricity of Isoceles triangle.\nThis method rapidly fails when the we want to compute angles for a non-symmetric conditions and for longer chains.\nFABRIK FABRIK (Forward And Backward Reaching Inverse Kinematics) seems to be the most common method of inverse kinematics. It\u0026rsquo;s a simple method that works well for short chains, and works on an Iterative approach.\nThere\u0026rsquo;s a really impressive video on YouTube that explains the FABRIK method.\nA Basic implementation in C# would involve looping through the chain and computing the angles, then back-propagating the angles to the end of the chain, Control nodes can be added to the chain to control the angles. Using FABRIK also lets you have long chains and control the pole placement of the end effector. Here\u0026rsquo;s a small snippet of what I got to work.\n#TODO Update when done\n","permalink":"/post/inverse_kinematics/","summary":"++++ This post is mirrored from here\nThis project started off in exploring the Inverse Kinematics. Inverse kinematics piqued my interest when I started watching MIT maker portfolio videos and stumbled on a 5 arm chain Robot arm. I\u0026rsquo;ve always wondered how IK systems work in blender or cinema4D and I thought I\u0026rsquo;d explore.\nThe first method I stumbled on was Isoceles triangle approach where you compute angles assuming symmetricity of Isoceles triangle.","title":"Inverse Kinematics"},{"content":"++++ This post is mirrored from here\nFourier Series is a mathematical technique that is used to approximate the shape of a curve by decomposing signal into frequency components.\nComplex Fourier Series Attempt #1 : Havent done much except trying to pick out a backend to work this thing on \u0026hellip; thought of using Cinema4D but due to lack of its precision on floating point integers coudn\u0026rsquo;t get it to work with my initial values And here's me messing with Cinema4D with rotating circles. Attempt #2 : Well i decided to come back to blender-python. and found an amazing tutorial on youtube ( It was in p5.js ), I didnt realise i could loop the entire thing instead of pre-stacking parametric equations in addition really impressive i must say :). Here's the demo at end of Attempt 2 :D Download the .blend file FourierDrawing_A_2.blend So now all i need to do is find fourier coefficients which i already have a script for in python ^^ above :\u003e and merge them into this one. Cheerios #Day2 Attempt #2 cont : I got the result but coudn't draw anything useful except basic signals due to memory limitation but its cool to see them drawing, This challenge was really cool ... i learnt a lot :D thanks to @vijay_shankar for hosting this. ","permalink":"/post/fourier_series_epicycloid/","summary":"++++ This post is mirrored from here\nFourier Series is a mathematical technique that is used to approximate the shape of a curve by decomposing signal into frequency components.\nComplex Fourier Series Attempt #1 : Havent done much except trying to pick out a backend to work this thing on \u0026hellip; thought of using Cinema4D but due to lack of its precision on floating point integers coudn\u0026rsquo;t get it to work with my initial values And here's me messing with Cinema4D with rotating circles.","title":"Fourier Series Epicycloid"},{"content":"++++ This post is mirrored from here\nThis is an entry to Itch.io\u0026rsquo;s Weekly Game Jam #150. Play on Github pages This is the first gamejam I\u0026rsquo;ve decided to team up with someone random from the internet. Which was really cool for working in a team under a time crunch.\nThis fella is my teammate\nThe main theme of this gamejam was **You are the enemy** which was first very confusing and we had literally no idea what to even do. We were first planning on making a game where you have to kill yourself through a mirror, But it sounded very wrong so we decided to drop having living things in game. Having material things to break and explode made it much more interesting so we thought of making a game where you play as a drone and try to shoot yourself by ricocheting off of walls. Being limited on time we decided to make it Top Down ( We already wasted 20+ hours on this brainstorming which also included some completly off theme ideas which were cool). The final idea we decided was make a game where we should destroy the tank we're sitting in to pass the level. Well the objective of ricochting bullets seems easy just use physics, but we wanted to have an aiming system which shows where the bullet is going, which turned out to be **SOO** simple but I was going the complete stupid way of computing it. (Spoiler) This Sorcery! What we had to do was to use the hit.gameObject.normal to get the surface normal of the object hit and just flip the hit vector.\nAfter a very \u0026ldquo;fun\u0026rdquo; session of brainstorming and finally implementing bullet reflections using vector reflections and dot products.\nWe finally finished the game 20 minutes before the deadling.. (phew).In the end we had alot of fun coming up with the idea and making it.\nWorstTank {Beta} by Pacchu, brrrr Gallery ","permalink":"/post/worst-tank-project/","summary":"++++ This post is mirrored from here\nThis is an entry to Itch.io\u0026rsquo;s Weekly Game Jam #150. Play on Github pages This is the first gamejam I\u0026rsquo;ve decided to team up with someone random from the internet. Which was really cool for working in a team under a time crunch.\nThis fella is my teammate\nThe main theme of this gamejam was **You are the enemy** which was first very confusing and we had literally no idea what to even do.","title":"Worst Tank Project"},{"content":"++++ This post is mirrored from here\nvisualizations Amplitude Shift keying Frequency Shift keying Quantization principle Delta Modulation Amplitude modulation This is completly made using Cinema4D and python-c4d Source Rest all the modulations are generated by simply switching input signal to various parameters of the signal. Delta Modulation Since Delta modulation is a bit different , the setup arrange is checking for the difference (0,1). ","permalink":"/post/digital_modulation_techniques/","summary":"++++ This post is mirrored from here\nvisualizations Amplitude Shift keying Frequency Shift keying Quantization principle Delta Modulation Amplitude modulation This is completly made using Cinema4D and python-c4d Source Rest all the modulations are generated by simply switching input signal to various parameters of the signal. Delta Modulation Since Delta modulation is a bit different , the setup arrange is checking for the difference (0,1). ","title":"Digital Modulation Techniques"},{"content":"++++ This post is mirrored from here\nSo this is Lorentz attractor written in blender-python and grease pencil, Lorentz attractor is a differential equation used to simulate 2D fluid flow mainly Atmospheric convection. This is a preview of what i made So how did i approach making this trippy beautiful simulation , Basically differential equations Lorentz attractor is governed by 3 differential equation on each of its axis Governed by 3 differential equations These equations induvially control the way the fluid flows in a corresponding domain. So how did i approach solving the differential equations? basically i took a small time \u0026lsquo;dt\u0026rsquo; and ran the simulation over many iterations \u0026hellip; bruteforcing for a solution. The above code is a function which is taking in current [x,y,z] position and returning the [dx,dy,dz] the differential positions Next, iterate through these things multiple times with a sample step 'dt = 0.001' Complete source code and blend files are below 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 import bpy import math import numpy as np def get_grease_pencil(gpencil_obj_name=\u0026#39;GPencil\u0026#39;) -\u0026gt; bpy.types.GreasePencil: \u0026#34;\u0026#34;\u0026#34; Return the grease-pencil object with the given name. Initialize one if not already present. :param gpencil_obj_name: name/key of the grease pencil object in the scene \u0026#34;\u0026#34;\u0026#34; # If not present already, create grease pencil object if gpencil_obj_name not in bpy.context.scene.objects: bpy.ops.object.gpencil_add(location=(0, 0, 0), type=\u0026#39;EMPTY\u0026#39;) # rename grease pencil bpy.context.scene.objects[-1].name = gpencil_obj_name # Get grease pencil object gpencil = bpy.context.scene.objects[gpencil_obj_name] return gpencil def get_grease_pencil_layer(gpencil: bpy.types.GreasePencil, gpencil_layer_name=\u0026#39;GP_Layer\u0026#39;, clear_layer=False) -\u0026gt; bpy.types.GPencilLayer: \u0026#34;\u0026#34;\u0026#34; Return the grease-pencil layer with the given name. Create one if not already present. :param gpencil: grease-pencil object for the layer data :param gpencil_layer_name: name/key of the grease pencil layer :param clear_layer: whether to clear all previous layer data \u0026#34;\u0026#34;\u0026#34; # Get grease pencil layer or create one if none exists if gpencil.data.layers and gpencil_layer_name in gpencil.data.layers: gpencil_layer = gpencil.data.layers[gpencil_layer_name] else: gpencil_layer = gpencil.data.layers.new(gpencil_layer_name, set_active=True) if clear_layer: gpencil_layer.clear() # clear all previous layer data # bpy.ops.gpencil.paintmode_toggle() # need to trigger otherwise there is no frame return gpencil_layer # Util for default behavior merging previous two methods def init_grease_pencil(gpencil_obj_name=\u0026#39;GPencil\u0026#39;, gpencil_layer_name=\u0026#39;GP_Layer\u0026#39;, clear_layer=True) -\u0026gt; bpy.types.GPencilLayer: gpencil = get_grease_pencil(gpencil_obj_name) gpencil_layer = get_grease_pencil_layer(gpencil, gpencil_layer_name, clear_layer=clear_layer) return gpencil_layer def draw_line(gp_frame, p0: tuple, p1: tuple): # Init new stroke gp_stroke = gp_frame.strokes.new() gp_stroke.display_mode = \u0026#39;3DSPACE\u0026#39; # allows for editing # Define stroke geometry gp_stroke.points.add(count=2) gp_stroke.points[0].co = p0 gp_stroke.points[1].co = p1 return gp_stroke def draw_circle(gp_frame, center: tuple, radius: float, segments: int): # Init new stroke gp_stroke = gp_frame.strokes.new() gp_stroke.display_mode = \u0026#39;3DSPACE\u0026#39; # allows for editing gp_stroke.draw_cyclic = True # closes the stroke #gp_stroke.line_width = 100 #gp_stroke.material_index = 1 # Define stroke geometry angle = 2*math.pi/segments # angle in radians gp_stroke.points.add(count=segments) for i in range(segments): x = center[0] + radius*math.cos(angle*i) y = center[1] + radius*math.sin(angle*i) z = center[2] gp_stroke.points[i].co = (x, y, z) return gp_stroke def rotate_stroke(stroke, angle, axis=\u0026#39;z\u0026#39;): # Define rotation matrix based on axis if axis.lower() == \u0026#39;x\u0026#39;: transform_matrix = np.array([[1, 0, 0], [0, math.cos(angle), -math.sin(angle)], [0, math.sin(angle), math.cos(angle)]]) elif axis.lower() == \u0026#39;y\u0026#39;: transform_matrix = np.array([[math.cos(angle), 0, -math.sin(angle)], [0, 1, 0], [math.sin(angle), 0, math.cos(angle)]]) # default on z else: transform_matrix = np.array([[cos(angle), -math.sin(angle), 0], [sin(angle), math.cos(angle), 0], [0, 0, 1]]) # Apply rotation matrix to each point for i, p in enumerate(stroke.points): p.co = transform_matrix @ np.array(p.co).reshape(3, 1) def draw_sphere(gp_frame, center: tuple, radius: int, circles: int): angle = math.pi / circles for i in range(circles): circle = draw_circle(gp_frame, center, radius, 32) rotate_stroke(circle, angle*i, \u0026#39;x\u0026#39;) print(angle * i) gp_layer = init_grease_pencil() sigma = 10 beta = 8/3 ro = 28 #init coords x = 1 y = 1 z = 1 dt = 0.01 prevpos = [(x,y,z),] def lorrentz(x,y,z,dt): dx = (sigma*(y-x))*dt dy = (x*(ro - z) - y)*dt dz = (x*y - beta*z)*dt return (dx,dy,dz) for frama in range(0,1000): gp_frame = gp_layer.frames.new(frama) dxyz = lorrentz(x,y,z,dt) newcoords = (x+dxyz[0],y+dxyz[1],z+dxyz[2]) if(np.linalg.norm(np.array((x,y,z)) - np.array(newcoords)) \u0026lt; 0.1): pass else: prevpos.append(newcoords) gp_stroke = gp_frame.strokes.new() gp_stroke.display_mode = \u0026#39;3DSPACE\u0026#39; # allows for editing gp_stroke.line_width = 200 gp_stroke.material_index = 1 for cpos in range(1,len(prevpos)-1): draw_line(gp_frame,prevpos[cpos-1],prevpos[cpos]) x+=dxyz[0] y+=dxyz[1] z+=dxyz[2] Download the .blend file Lorentz-attractor.blend Sources Wikipedia MATLAB Thank you for reading about my submission on Lorentz attractor ","permalink":"/post/lorentz-attractor/","summary":"++++ This post is mirrored from here\nSo this is Lorentz attractor written in blender-python and grease pencil, Lorentz attractor is a differential equation used to simulate 2D fluid flow mainly Atmospheric convection. This is a preview of what i made So how did i approach making this trippy beautiful simulation , Basically differential equations Lorentz attractor is governed by 3 differential equation on each of its axis Governed by 3 differential equations These equations induvially control the way the fluid flows in a corresponding domain.","title":"Lorentz Attractor"},{"content":" Greeting humans!\nI am Prashant, a Electronics and Communication Graduate.\nI have a keen interest in Mathematical modelling, Robotics and building Electronic contraptions. Building visualisations and interactive systems for the concepts been taught and watching them in action is the most fun part of building things.\nInterests Programatical Mathematics. Electronics and Robotics. GameJams. Cycling. Badminton. Interesting Stuff I like Essense of Algebra\nBook of shaders\nSebastian Lague\nMusic ","permalink":"/about/","summary":" Greeting humans!\nI am Prashant, a Electronics and Communication Graduate.\nI have a keen interest in Mathematical modelling, Robotics and building Electronic contraptions. Building visualisations and interactive systems for the concepts been taught and watching them in action is the most fun part of building things.\nInterests Programatical Mathematics. Electronics and Robotics. GameJams. Cycling. Badminton. Interesting Stuff I like Essense of Algebra\nBook of shaders\nSebastian Lague\nMusic ","title":"Behind the person"},{"content":"Projects 3D Dashboard for IIIT Smart City Lab An exploratory playground to visualise nodes on iiit\u0026rsquo;s onem2m server in a more openworld fashion.\nA web playable version (testing) is setup Gracie:prashantnook.in Final Hosted version is available Gracie:iiit.ac.in\nDownload (github releases) Smart Lamp post (KETI OneM2M Hackathon) A Smart lamp post for essential data dashboard with e-paper display\nA blog post about this on IIIT A blog post written by me Rocket Stablity Controller Using PID Controller for rocket stability. Hardware implementation was unfortunately not finished due to college indirectly stealing the hardware before submission deadline.\nA web playable version of this project is available Here\nGcode experiements This is a simple Gcode line art generator made for writing records and drawing manga/lineart\nTest it out Discord Bot A random discord bot that does alot of things.\nVisit Github to invite the bot to your server Here\nLinear Antenna Phase Shader Phased Antenna Direction modelling in a linear antenna array.\nNewton Fractal Shader Solving complex cubic polynomial using newton raphson method\n## Lorenz attractor Blender Vector Fields Games Worst Tank This is a collaborative entry to itch.io\u0026rsquo;s weekly gamejam.\nWorstTank {Beta} by Pacchu, brrrr Torch Runner This is an entry to ludam-dare gamejam.\nTorch Runner by Pacchu Web dev Fourier Epicycle Drawing (~ inspired from 3b1b and Coding train ) College project portal \u0026amp; Result parser Currently offline due to heroku\u0026rsquo;s free tier expiration\n","permalink":"/projects/","summary":"Projects 3D Dashboard for IIIT Smart City Lab An exploratory playground to visualise nodes on iiit\u0026rsquo;s onem2m server in a more openworld fashion.\nA web playable version (testing) is setup Gracie:prashantnook.in Final Hosted version is available Gracie:iiit.ac.in\nDownload (github releases) Smart Lamp post (KETI OneM2M Hackathon) A Smart lamp post for essential data dashboard with e-paper display\nA blog post about this on IIIT A blog post written by me Rocket Stablity Controller Using PID Controller for rocket stability.","title":"Catalog"},{"content":"++++ This post is mirrored from here\nCinema4D Math Graphing using Matrix plane building a This is a simple test project i wanted to build ... to generate 3D XY plots in Cinema4D. How does it work? A plane is generated with z = 0 if we iterate through the x and y axes \u0026hellip; by injecting a function and taking the corresponding Z value we can basically plot stuff in cinema4D (I know thats how basically every graphing thing works)\nhere's the code here's a demo ","permalink":"/post/cinema4d_grapher/","summary":"++++ This post is mirrored from here\nCinema4D Math Graphing using Matrix plane building a This is a simple test project i wanted to build ... to generate 3D XY plots in Cinema4D. How does it work? A plane is generated with z = 0 if we iterate through the x and y axes \u0026hellip; by injecting a function and taking the corresponding Z value we can basically plot stuff in cinema4D (I know thats how basically every graphing thing works)","title":"Cinema4d Grapher"},{"content":"++++ This post is mirrored from here\nStandard SRI model refers to Suseceptance population ( those who can be infected from the virus ) , Infected (duh) , Recovered/Dead .. by solving differential equations\nS = Susceptance population R = Recovered/Dead I = Infected\nwhere α is the r_o value of Covid19 its negative as people get infected the total susecptance population drops (ie people get sick) here β is the recovery coefficient of Covid19 its negative as infected people either gain immunity or die due to virus ... either way they aren't suceptible to the virus anymore Source code Source SRI MODEL PDF\nFull Resolution\n","permalink":"/post/covid_sri_model/","summary":"++++ This post is mirrored from here\nStandard SRI model refers to Suseceptance population ( those who can be infected from the virus ) , Infected (duh) , Recovered/Dead .. by solving differential equations\nS = Susceptance population R = Recovered/Dead I = Infected\nwhere α is the r_o value of Covid19 its negative as people get infected the total susecptance population drops (ie people get sick) here β is the recovery coefficient of Covid19 its negative as infected people either gain immunity or die due to virus .","title":"Covid SRI Model"}]